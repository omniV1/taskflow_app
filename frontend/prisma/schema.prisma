generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filterJson", "fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            BigInt    @id @default(autoincrement())
  name          String    @db.VarChar(255)
  email         String    @unique @db.VarChar(255)
  password      String    @db.VarChar(255)
  isActive      Boolean   @default(true) @map("is_active")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  lastLogin     DateTime? @map("last_login")
  settings      Json?     @default("{}")
  github_id     String?   @db.VarChar(255)
  auth_provider String?   @db.VarChar(255)
  role          String    @default("USER") @db.VarChar(255)
  tasks         Task[]

  @@index([email])
  @@map("users")
}

model Task {
  id            BigInt    @id @default(autoincrement())
  title         String    @db.VarChar(255)
  description   String?
  dueDate       DateTime? @map("due_date")
  completed     Boolean   @default(false)
  completedAt   DateTime? @map("completed_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  userId        BigInt    @map("user_id")
  categoryId    BigInt?   @map("category_id")
  attachments   String[]  @default([])
  tags          String[]  @default([])
  reminderDate  DateTime? @map("reminder_date")
  estimatedTime Int?      @map("estimated_time")
  actualTime    Int?      @map("actual_time")
  isRecurring   Boolean   @default(false) @map("is_recurring")
  recurringRule String?   @map("recurring_rule")
  priority      String    @default("MEDIUM") @db.VarChar(255)
  category      Category? @relation(fields: [categoryId], references: [id])
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([categoryId])
  @@index([dueDate])
  @@index([completed])
  @@map("tasks")
}

model Category {
  id          BigInt   @id @default(autoincrement())
  name        String   @unique @db.VarChar(255)
  description String?
  color       String?  @db.VarChar(7)
  icon        String?  @db.VarChar(50)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  isDefault   Boolean  @default(false) @map("is_default")
  tasks       Task[]

  @@index([name])
  @@map("categories")
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  entityType String   @map("entity_type") @db.VarChar(50)
  entityId   Int      @map("entity_id")
  action     String   @db.VarChar(50)
  userId     Int      @map("user_id")
  timestamp  DateTime @default(now())
  details    Json?

  @@index([entityType, entityId])
  @@index([userId])
  @@index([timestamp])
  @@map("audit_logs")
}

model Notification {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  title     String    @db.VarChar(255)
  content   String
  isRead    Boolean   @default(false) @map("is_read")
  createdAt DateTime  @default(now()) @map("created_at")
  readAt    DateTime? @map("read_at")
  type      String    @db.VarChar(50)
  link      String?   @db.VarChar(255)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

model Token {
  id        Int       @id @default(autoincrement())
  token     String    @unique @db.VarChar(255)
  userId    Int       @map("user_id")
  type      TokenType
  expiresAt DateTime  @map("expires_at")
  createdAt DateTime  @default(now()) @map("created_at")
  usedAt    DateTime? @map("used_at")

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("tokens")
}

enum TokenType {
  PASSWORD_RESET
  EMAIL_VERIFICATION
}
